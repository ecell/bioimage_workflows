# -*- coding: utf-8 -*-
"""generation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/ecell/bioimage_workflows/blob/master/generation.ipynb

!pip uninstall -y scopyon
!pip install git+https://github.com/ecell/scopyon
!pip freeze | grep scopyon
"""

import argparse

import mlflow
mlflow.start_run(run_name="generation", nested=True)

"""Prepare for generating inputs."""
parser = argparse.ArgumentParser(description='analysis1 step')
parser.add_argument('--num_samples', type=int, default=1)
parser.add_argument('--num_frames', type=int, default=5)
args = parser.parse_args()

num_samples = int(args.num_samples)
num_frames = int(args.num_frames)

#
seed = 123
exposure_time = 33.0e-3
interval = 33.0e-3
Nm = [100, 100, 100]
Dm = [0.222e-12, 0.032e-12, 0.008e-12]
transmat = [
    [0.0, 0.5, 0.0],
    [0.5, 0.0, 0.2],
    [0.0, 1.0, 0.0]]

from mlflow import log_metric, log_param, log_artifacts
log_param("seed", seed)
log_param("num_samples", num_samples)
log_param("exposure_time", exposure_time)
log_param("interval", interval)
log_param("num_frames", num_frames)

#nproc = 8

# !pip install mlflow

import numpy
rng = numpy.random.RandomState(seed)

import scopyon

config = scopyon.DefaultConfiguration()
config.default.effects.photo_bleaching.switch = False
config.default.detector.exposure_time = exposure_time
pixel_length = config.default.detector.pixel_length / config.default.magnification
L_2 = config.default.detector.image_size[0] * pixel_length * 0.5
L_2

#config.environ.processes = nproc

timepoints = numpy.linspace(0, interval * num_frames, num_frames + 1)
ndim = 2

import pathlib
artifacts = pathlib.Path("./artifacts")
artifacts.mkdir(parents=True, exist_ok=True)

config.save(artifacts / 'config.yaml')

for i in range(num_samples):
    samples = scopyon.sample(timepoints, N=Nm, lower=-L_2, upper=+L_2, ndim=ndim, D=Dm, transmat=transmat, rng=rng)
    inputs = [(t, numpy.hstack((points[:, : ndim], points[:, [ndim + 1]], numpy.ones((points.shape[0], 1), dtype=numpy.float64)))) for t, points in zip(timepoints, samples)]
    ret = list(scopyon.generate_images(inputs, num_frames=num_frames, config=config, rng=rng, full_output=True))
    
    inputs_ = []
    for t, data in inputs:
        inputs_.extend(([t] + list(row) for row in data))
    inputs_ = numpy.array(inputs_)
    numpy.save(artifacts / f"inputs{i:03d}.npy", inputs_)

    numpy.save(artifacts / f"images{i:03d}.npy", numpy.array([img.as_array() for img, infodict in ret]))

    true_data = []
    for t, (_, infodict) in zip(timepoints, ret):
        true_data.extend([t, key] + list(value) for key, value in infodict['true_data'].items())
    true_data = numpy.array(true_data)
    numpy.save(artifacts / f"true_data{i:03d}.npy", true_data)

#!ls ./artifacts

log_artifacts("./artifacts")
mlflow.end_run()
